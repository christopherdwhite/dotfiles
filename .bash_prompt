#!/usr/bin/env bash

# # bash prompt
#
# this configuration is based almost entirely on Mathias Bynems exceptional dotfiles example with small tweaks
# https://github.com/mathiasbynens/dotfiles/blob/master/.bash_prompt#L1
#

# # functions

# determine git status and prepare git details for prompt
prompt_git() {
	local s='';
	local branchName='';

	# check if the current directory is in a git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# get the short symbolic ref.
		# if HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

# # style

# ## style: color mode
# set color mode for terminal and system
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

# ## style: color format
# define in both formats
if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	foreground=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	foreground="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# ## style: username
# highlight the user name when logged in as root
if [[ "${USER}" == "root" ]]; then
	userStyle="${bold}${red}";
else
	userStyle="${blue}";
fi;

# ## style: hostname
# highlight the hostname when connected via SSH
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${orange}";
else
	hostStyle="${cyan}";
fi;

# # style: prompt
# set terminal title and prompt
title="\s: \W"                                                                  # title content
PS1="\[\033]0;$title\007\]";                                                    # title
PS1+="\[${userStyle}\]\u";                                                      # username
PS1+="\[${foreground}\] at ";                                                   # `at`
PS1+="\[${hostStyle}\]\h";                                                      # host
PS1+="\[${foreground}\] in ";                                                   # `in`
PS1+="\[${green}\]\w";                                                          # working directory full path
PS1+="\$(prompt_git \"\[${foreground}\] on \[${violet}\]\" \"\[${purple}\]\")"; # git repository details
PS1+="\n";                                                                      # new line
PS1+="\[${foreground}\]\$ \[${reset}\]";                                        # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
