#!/bin/bash

# # Bash Functions
#
# Useful functions that save time and simplify bash related tasks.
#

# # Table of Contents
#
# - Productivity Functions
#   - 1Password Fuctions
#   - Dash Functions
#   - Marky Functions
# - Symlink Functions
# - Source Control Functions
# - Utility Functions
#





# # Productivity Functions

# ## 1Password Fuctions

# opl() 1Password Log In
#
# Sign in to 1Password CLI
#
function opl() {
	eval "$(op signin my)"
}

# opq() Get Password from 1Password
#
# Queries 1Password for a login with the name matching the passed string and assigns the password to the Keyboard Maestro op_passboard variable.
#
# I have a Keybaord Maestro macro that will insert the password by typing assigned to control-option-command-v
#
# NOTE: This probably isn't the most secure practice, malicious software could probably pick up the password in a few different ways but since it does use a Keyboard Maestro variable it's never passed to clipboard won't be saved in clipboard history applications.
#
function opq() {
	local passboard
	passboard=`op get item "$@" | jq --raw-output '.details.fields[] | select(.designation=="password").value' | tr -d "\n"`
	osascript -e "tell app \"Keyboard Maestro Engine\" to setvariable \"op_passboard\" to \"$passboard\""
}

# opf() Get password from 1Password Fallback
#
# This is a fallback function that queries 1Password for a password and copies it to a clipboard if Keyboard Maestro isn't installed on this system.
#
# NOTE: This is _not_ a secure practice as any process that monitors pasteboards such as a clipboard history app will catch the password.
#
# To partially make this more secure you can set most clipboard history applications to ignore anything copied from a specefic app such as the Terminal but this is a global setting for the app, it won't save anything copied from the terminal which may cause more frustration than it seeks to avoid.
#
# Additionally, this still leaves the possibility that another application is monitoring the clipboard that you're unaware of, maliciously or otherwise.
#
# It might be possible to flag the data as org.nspasteboard.ConcealedType but I after a bunch of searching and testing I haven't figured out if that's possible using pbcopy.
#
function opf() {
	op get item "$@" | jq --raw-output '.details.fields[] | select(.designation=="password").value' | tr -d "\n" | pbcopy
}



# ## Dash Functions
#
# Functions to search Dash from commmand line

# dash() Open Argument in Dash
#
# Search's Dash for the supplied argument copied from Brett Terpstra's blog:
#
# http://brettterpstra.com/2014/05/10/bash-and-dash/
#
function dash() {
	open "dash://$*"
}

# dman() Open Argument's Manpage in Dash
#
# Rather than printing a manpage in the terminal open it in Dash instead, also copied from Brett's post.
#
function dman() {
	open "dash://manpages:$*"
}

# dman() Open Argument's TLDR Page in Dash
#
# Opens a TLDR page for a command (where one exists) rather than using the manpage.
#
function tldr() {
	open "dash://tldr:$*"
}



# ## Marky Functions
#
# Convert webpages to Markdown via Brett's Marky service
#
# http://fuckyeahmarkdown.com
#

# wmd() Web to Markdown Copier
wmd () {
	encurl=$(urlenc "$@")
	curl "http://fuckyeahmarkdown.com/go/?read=1&preview=0&showframe=0&u=$encurl" -s|pbcopy
	echo "Copied"
}





# # Symlink Functions
#
# Three functions that take a path and symlinks them into `~/Library/Application Support`, `~/Library/Containers` and `~/Library/Preferences`

# syma() Symlink to Application Directory
function syma() {
	ln -s "$@" "$HOME/Library/Application Support"
}

# symc() Symlink to Containers
function symc() {
	ln -s "$@" "$HOME/Library/Containers"
}

# symp() Symlink to Preferences
function symc() {
	ln -s "$@" "$HOME/Library/Preferences"
}





# # Source Control Functions

# gc() Lazy git commit
#
# combines git add, commit with message and push into a single command.
function gc() {
	git add .
	git add -u
	git commit -a -m "$@"
	git push
}





# # Utility Functions

# urlenc() URL Encode Passed String
#
# Tweaked from Brett's function:
#
# http://brettterpstra.com/2012/06/20/marky-the-markdownifier-reintroductions/
#
urlenc () {
	echo -n "$@" | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'
}
